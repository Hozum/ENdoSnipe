/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.34
 * Generated at: 2013-02-21 04:18:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import org.wgp.file.filter.FileNameFilter;
import org.wgp.file.util.FilePathUtil;
import java.io.FileReader;
import java.io.FileInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import org.wgp.file.filter.FileNameFilter;
import org.wgp.file.util.FilePathUtil;

public final class Dashboard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/WEB-INF/views/../include/ext/javaScriptInclude.jsp", Long.valueOf(1361408154949L));
    _jspx_dependants.put("/WEB-INF/views/./SignalDialog.jsp", Long.valueOf(1361408155083L));
    _jspx_dependants.put("/WEB-INF/views/../include/pluginsInclude.jsp", Long.valueOf(1361408154950L));
    _jspx_dependants.put("/WEB-INF/views/../include/DashboardInclude.jsp", Long.valueOf(1361408154948L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("\r\n");
      out.write("<!--\r\n");
      out.write(" WGP  0.1  - Web Graphical Platform\r\n");
      out.write(" Copyright (c) 2012, WGP.LICENSES.COM\r\n");
      out.write(" Dual licensed under the MIT and GPL licenses\r\n");
      out.write(" http://www.opensource.org/licenses/mit-license.php\r\n");
      out.write(" http://www.gnu.org/licenses/gpl-2.0.html\r\n");
      out.write(" Date: 2012-04-29\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/jQuery-ui/css/jquery-ui-1.9.2.custom.min.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/jqGrid/css/ui.jqgrid.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" media=\"screen\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/jeegoocontext/skins/cm_default/style.css\" />\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/wgp/css/wgp-graph.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/wgp/css/wgp.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("\r\n");
      out.write("<!-- ウィジェット用のjavaScript動的読みこみを行なう -->\r\n");

	// ウィジェットとなるjavaScriptを指定
	//TODO 残課題 ファイルパス指定を直接記入している。
	List<String> libraryPathList = new ArrayList<String>();
	libraryPathList.add("jQuery");
	libraryPathList.add("jQuery-ui");
	libraryPathList.add("underscore");
	libraryPathList.add("backbone");
	libraryPathList.add("dygraph");
	libraryPathList.add("jeegoocontext");
	libraryPathList.add("jquery.event.drag-2.2");
	libraryPathList.add("jsTree");
	libraryPathList.add("Raphael");
	libraryPathList.add("wgp");
	String libraryJsDirectoryPath = config.getServletContext()
			.getRealPath("resources/lib");
	File libraryJsDirectory = new File(libraryJsDirectoryPath);
	FileNameFilter libraryNameFilter = new FileNameFilter(null, null, "js");

	for (String directoryPath : libraryPathList) {
		File elementDirectory = new File(libraryJsDirectory, directoryPath);
		List<File> elementFileList = FilePathUtil.getAllFilePath(
				elementDirectory, libraryNameFilter);
		if (elementFileList != null && elementFileList.size() > 0) {
			// ウィジェットとなるjavaScriptファイルのファイルパスを基にscriptタグを生成する。
			for (File jsFile : elementFileList) {
				String[] filePaths = jsFile.getAbsolutePath().split("resources");
				String tmpfilePath = "/resources" + filePaths[filePaths.length - 1];
				String filePath = tmpfilePath.replaceAll("\\\\", "/");
				out.print("<script type=\"text/javascript\" ");
				out.print("src=\"" + request.getContextPath()
						+ filePath
						+ "\">");
				out.println("</script>");
			}
		}
	}	

      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/jqGrid/js/i18n/grid.locale-");
      out.print(request.getLocale().getLanguage());
      out.write(".js\"\r\n");
      out.write("\ttype=\"text/javascript\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/jqGrid/js/jquery.jqGrid.min.js\"\r\n");
      out.write("\ttype=\"text/javascript\"></script>");
      out.write('\r');
      out.write('\n');
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/css/nodeinfomation/nodeStyles.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/slider/ui.slider.extras.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/pagination/pagination.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/pagination/jquery.pagination.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/lib/slider/selectToUISlider.jQuery.js\">\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/common/constants.js\">\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/common/singleSliderView.js\">\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/common/dualSliderView.js\">\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/common/endoSnipeUtility.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/common/ensAppView.js\">\t\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/nodeinfomation/view/resourceTreeView.js\">\t\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/tree/signalDialogView.js\">\t\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/nodeinfomation/view/nodeInfoParentView.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/nodeinfomation/view/resourceGraphView.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/nodeinfomation/model/resourceGraphModel.js\">\t\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/tree/ensTreeView.js\">\t\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/nodeinfomation/view/perfDoctorView.js\">\t\r\n");
      out.write("</script>\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"headerLogo\">\r\n");
      out.write("\t\t<img src=\"");
      out.print(request.getContextPath());
      out.write("/resources/images/ENdoSnipe_logo.png\" />\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"persArea\"></div>\r\n");
      out.write("\t<input id=\"treeData\" type=\"hidden\" value='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${treeData}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("' />\r\n");
      out.write("\t<div id=\"signalDialog\" title=\"Signal Definition\" style=\"display:none\">\r\n");
      out.write("\t\t<div id=\"signalNameArea\" class=\"dialogContentArea\">\r\n");
      out.write("\t\t\t<div id=\"signalNameItem\" class=\"dialogItem\">Signal Name : </div>\r\n");
      out.write("\t\t\t<div id=\"signalNameValue\" class=\"dialogValue\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"signalName\" class=\"signalValue\" value=\"new Signal\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"signalMatchingPatternArea\" class=\"dialogContentArea\">\r\n");
      out.write("\t\t\t<div id=\"signalMatchingPatternItem\" class=\"dialogItem\">Matching Pattern : </div>\r\n");
      out.write("\t\t\t<div id=\"signalMatchingPatternValue\" class=\"dialogValue\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"matchingPattern\" class=\"signalValue\" value=\"\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"signalPatternArea\" class=\"dialogContentArea\">\r\n");
      out.write("\t\t\t<div id=\"signalPatternItem\" class=\"dialogItem\">Signal Pattern : </div>\r\n");
      out.write("\t\t\t<div id=\"signalPatternValue\" class=\"dialogValue\">\r\n");
      out.write("\t\t\t\t<select>\r\n");
      out.write("\t\t\t\t\t<option value=\"3\">3 Level</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"5\">5 Level</option>\r\n");
      out.write("\t\t\t\t</select>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"signalPatternValueArea\" class=\"dialogContentArea\">\r\n");
      out.write("\t\t\t<div id=\"signalPatternValueItem\" class=\"dialogItem\">Threshold Value of each signal levels : </div>\r\n");
      out.write("\t\t\t<div id=\"signalPatternValueValue\" class=\"dialogValue\">\r\n");
      out.write("\t\t\t\t<div id=\"signalPatternValue_1\" class=\"dialogPatternValue\">\r\n");
      out.write("\t\t\t\t\t<div>1 : </div>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" id=\"patternValue_1\" class=\"signalValue\" value=\"\" pattern=\"^([1-9]\\d*|0)(\\.\\d+)?$\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div id=\"signalPatternValue_2\" class=\"dialogPatternValue\">\r\n");
      out.write("\t\t\t\t\t<br />\r\n");
      out.write("\t\t\t\t\t<div>2 : </div>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" id=\"patternValue_2\" class=\"signalValue\" value=\"\" pattern=\"^([1-9]\\d*|0)(\\.\\d+)?$\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div id=\"signalPatternValue_3\" class=\"dialogPatternValue\">\r\n");
      out.write("\t\t\t\t\t<div>3 : </div>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" id=\"patternValue_3\" class=\"signalValue\" value=\"\" pattern=\"^([1-9]\\d*|0)(\\.\\d+)?$\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div id=\"signalPatternValue_4\" class=\"dialogPatternValue\">\r\n");
      out.write("\t\t\t\t\t<br />\r\n");
      out.write("\t\t\t\t\t<div>4 : </div>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" id=\"patternValue_4\" class=\"signalValue\" value=\"\" pattern=\"^([1-9]\\d*|0)(\\.\\d+)?$\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div id=\"signalPatternValue_5\" class=\"dialogPatternValue\">\r\n");
      out.write("\t\t\t\t\t<div>5 : </div>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" id=\"patternValue_5\" class=\"signalValue\" value=\"\" pattern=\"^([1-9]\\d*|0)(\\.\\d+)?$\" />\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"clearFloat\"></div>\r\n");
      out.write("\t\t<div id=\"signalEscalationPeriodArea\" class=\"dialogContentArea\">\r\n");
      out.write("\t\t\t<div id=\"signalEscalationPeriodItem\" class=\"dialogItem\">Escalation Period : </div>\r\n");
      out.write("\t\t\t<div id=\"signalEscalationPeriodValue\" class=\"dialogValue\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"escalationPeriod\" class=\"signalValue\" value=\"\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div id=\"signalEscalationPeriodUnit\">ms</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("<title>ENdoSnipe Dashboard</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body id=\"main\" oncontextmenu=\"return false;\" onload=\"self.focus();\">\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tvar viewArea1 = {};\r\n");
      out.write("\t\tvar viewArea2 = {};\r\n");
      out.write("\r\n");
      out.write("\t\tviewArea1.width = 300;\r\n");
      out.write("\t\tviewArea1.height = 800;\r\n");
      out.write("\t\tviewArea1.rowspan = 1;\r\n");
      out.write("\t\tviewArea1.colspan = 1;\r\n");
      out.write("\r\n");
      out.write("\t\tviewArea2.width = 900;\r\n");
      out.write("\t\tviewArea2.height = 800;\r\n");
      out.write("\t\tviewArea2.rowspan = 1;\r\n");
      out.write("\t\tviewArea2.colspan = 1;\r\n");
      out.write("\r\n");
      out.write("\t\tvar table = [ [ new wgp.PerspectiveModel(viewArea1),\r\n");
      out.write("\t\t\t\tnew wgp.PerspectiveModel(viewArea2) ] ];\r\n");
      out.write("\t\tvar perspectiveView = new wgp.PerspectiveView({\r\n");
      out.write("\t\t\tid : \"persArea\",\r\n");
      out.write("\t\t\tcollection : table,\r\n");
      out.write("\t\t\tminimum : false,\r\n");
      out.write("\t\t\tclose : false\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tperspectiveView.dropView(\"persArea_drop_0_0\", \"tree_area\");\r\n");
      out.write("\t\tperspectiveView.dropView(\"persArea_drop_0_1\", \"contents_area\");\r\n");
      out.write("\r\n");
      out.write("\t\tvar appView = new ENS.AppView();\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// プラグイン単位のディレクトリ名を取得する
	String pluginsDirectoryPath = config.getServletContext().getRealPath("resources/plugins");
	File pluginsDirectory = new File(pluginsDirectoryPath);
	String[] pluginNames = pluginsDirectory.list();
	
	/*
	 * 各プラグインディレクトリ直下にあるconfig.txtファイルからインポートするjsファイル/cssファイルを取得し、
	 * jsファイル/cssファイルそれぞれに対してインポートタグを生成する。
	 */
	for (String pluginName: pluginNames) {
		File elementDirectory = new File(pluginsDirectory, pluginName);
		File configFile = new File(elementDirectory, "include.txt");
		// ファイルが存在しない場合はそのプラグインのファイルインポートはしない
		boolean isExist = configFile.exists();
		if (!isExist) {
			System.out.println(elementDirectory + "\\include.txtが存在しないため、このプラグインファイルの読込はできませんでした。");
			continue;
		}
		
		BufferedReader reader = new BufferedReader(new FileReader(configFile));
		String line;
		
		while ((line = reader.readLine()) != null) {
			String tmpfilePath = "/resources/plugins/" + pluginName + "/" + line;
			String filePath = tmpfilePath.replaceAll("\\\\", "/");
			if (line.endsWith("js")) {
				out.print("<script type=\"text/javascript\" ");
				out.print("src=\"" + request.getContextPath()
						+ filePath
						+ "\">");
				out.println("</script>");
			}
			else if (line.endsWith("css")) {
				out.print("<link rel=\"stylesheet\" ");
				out.print("href=\"" + request.getContextPath()
						+ filePath
						+ "\" ");
				out.print("type=\"text/css\" ");
				out.print("media=\"all\">");
			}
		}
		reader.close();
	}


      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\t<script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/common/user.js\"\r\n");
      out.write("\t\ttype=\"text/javaScript\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar treeView = new ENS.treeView({\r\n");
      out.write("\t\t\tid : \"tree_area\",\r\n");
      out.write("\t\t\ttargetId : \"contents_area\",\r\n");
      out.write("\t\t\tthemeUrl : wgp.common.getContextPath()\r\n");
      out.write("\t\t\t+ \"/resources/css/jsTree/style.css\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t// ツリー連携を追加。\r\n");
      out.write("\t\ttreeView.setClickEvent(\"contents_area\");\r\n");
      out.write("\t\ttreeView.addContextMenu(ENS.tree.contextOption);\r\n");
      out.write("\t\tappView.addView(treeView, wgp.constants.TREE.DATA_ID);\r\n");
      out.write("\t\twebsocketClient = new wgp.WebSocketClient(appView, \"notifyEvent\");\r\n");
      out.write("\t\twebsocketClient.initialize();\r\n");
      out.write("\t\tappView.getTermData([ wgp.constants.TREE.DATA_ID ], new Date(),\r\n");
      out.write("\t\t\t\tnew Date());\r\n");
      out.write("\r\n");
      out.write("\t\t$(\"#tree_area\")\r\n");
      out.write("\t\t\t\t.click(\r\n");
      out.write("\t\t\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\t\t\tif ($(\"[id$='mapreduce/task']\") != undefined) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tvar elem = $(\"[id$='mapreduce/task']\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t$(\"#tree_area\").jstree(\"delete_node\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\telem);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<input type=\"hidden\" id=\"context\" value=\"");
      out.print(request.getContextPath());
      out.write("\" />\r\n");
      out.write("</body>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/resources/css/common.css\"\r\n");
      out.write("\ttype=\"text/css\" media=\"all\">\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
