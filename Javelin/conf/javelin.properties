################################################################################
# Javelin Configurations
################################################################################

#--------------------------------------------------
# Setting for startup
#--------------------------------------------------

# ConcurrentAccessMonitor,CollectionMonitor
javelin.skipClassOnProcessing=true


#--------------------------------------------------
# Setting for Operation Analysis Log
#--------------------------------------------------

# System log output directory for Javelin operating situation
javelin.system.log=../traces

# Log level of system log (FATAL\u3001ERROR\u3001WARN\u3001INFO\u3001DEBUG)
javelin.system.log.level=INFO

# Maximum file size of system log (bytes)
javelin.system.log.size.max=1000000

# Maximum number of file of system log
javelin.system.log.num.max=16

# Javelin Event Level (ERROR\u3001WARN\u3001INFO)
javelin.event.level=WARN

# Minimum Alarm Interval
javelin.minimumAlarmInterval=0

# Interval for the same event detection. 
# The Event is detected only if time passes over this interval from the last event.
# It prevents NoTimeoutDetected and IntervalError being detected in surplus.
javelin.eventInterval=3600000

#--------------------------------------------------
# Setting for Communication
#--------------------------------------------------

# Port Number for Communication with BottleneckEye
javelin.acceptPort=18000

# Port Reacquisition Interval for Communication with BottleNeckEye
# If port acquisition for communication failed, retry following interval later.(Unit: millisecond)
javelin.bind.interval=5000

# Port range specification flag for communication with BottleneckEye/DataCollector
javelin.acceptPort.isRange=false

# Maximum value of port range specification for communication with BottleneckEye/DataCollector
javelin.acceptPort.rangeMax=18010

# Connection Mode (Client or Server)
javelin.connection.mode=client

# Host Name for communication with BottleneckEye/DataCollector (javelin to BottleneckEye)
javelin.connectHost=localhost

# Port Number for communication with BottleneckEye/DataCollector (javelin to BottleneckEye)
javelin.connectPort=19000

# Cluster Name
javelin.clusterName=default

# Javelin Agent Name
javelin.agentName=agent

#--------------------------------------------------
# Setting for file path (Relative specification from this file is valid)
#--------------------------------------------------

# Path to jvn file output directory
javelin.javelinFileDir=../logs

# Path to license file
javelin.license.path=../license

# Path to file for persistence of information such as Threshold value
javelin.serializeFile=../data/serialize.dat

# Path to convert target class specification file
javelin.include=include.conf

# Path to convert exclusion class specification file
javelin.exclude=exclude.conf

#--------------------------------------------------
# Setting for Javelin log output
#--------------------------------------------------

# Flag of jvn log save on server side
javelin.log.enable=false

# Maximum number of files of jvn log
javelin.log.jvn.max=256

# Zipping Threshold value of jvn log file
# (If the number of output files reaches this number, log files are zipped.)
javelin.log.zip.max=256

# Flag of use of CallTreeNode
javelin.call.tree.enable=false

# Maximum number of CallTree child saved on Javelin.
# If the number of CallTreeNode belonging CallTree exceed this number,
# output measurable CallTreeNode to jvn, and save measurement information confirmed on Profiler view.
javelin.call.tree.max=5000

# Flag of all jvn log save and measurement if the number of CallTreeNode reaches maximum.
javelin.call.tree.all=false

# Maximum number of method calling information saved on each class
javelin.record.invocation.num.max=1024

# Flag of Discard
javelin.discard=true

#--------------------------------------------------
# Setting for Javelin log contents
#--------------------------------------------------

# Setting for argument information output of method calling
javelin.log.args=false
javelin.log.args.detail=false
javelin.log.args.detail.depth=1

# Setting for return value information of method calling
javelin.log.return=false
javelin.log.return.detail=false
javelin.log.return.detail.depth=1

# セッション情報を引数として出力するかどうか
javelin.log.http.session=false
javelin.log.http.session.detail=true
javelin.log.http.session.detail.depth=2

# Maximum number of letter of argument or return value
javelin.stringLimitLength=102400

# Maximum value of depth for investigation of inheritance hierarchy with inheritance
javelin.inheritance.depth=5

# Flag of measurement target exclusion based on bytecode contents. 0:Exclude 1:Not exclude
javelin.bytecode.exclude.policy=1

# Maximum bytecode length excluded from information acquisition target of Javelin.
# The exclusion judge is executed only if bytecode length is less than this value.
javelin.bytecode.exclude.length=32

# Maximum number of control instruction excluded from information acquisition target of Javelin
# The target is excluded if the number of control instruction is less than this value.
javelin.bytecode.exclude.controlCount=0

# Flag of stacktrace output at the time of the method calling
javelin.log.stacktrace=false

# Depth of stacktrace output to log
javelin.traceDepth=30

# Flag of output for VM MBean information
javelin.log.mbeaninfo=true
javelin.log.mbeaninfo.root=true

# Maximum character length of the method name
javelin.invocation.name.limitLength=2048

# Root node name of method calling
javelin.rootCallerName=root

# Alternative node name named if end node of method calling is not specified.
javelin.endCalleeName=unknown

# A way of determining thread name
# 0:Thread name@Thread ID (Thread class name@Object ID)
# 1:Thread ID
# 2:Thread Name
# 3:Method Name\uff08It correspond to the servlet path at the time of Servlet filter built-in.\uff09
javelin.threadModel=0

# Unit of CPU activity ratio
javelin.cpu.unit=1

#--------------------------------------------------
# Setting for Method of Threshold Value Judgement 
#--------------------------------------------------

# Set Turn-around-time as the judgement target of Threshold value excess.
#javelin.recordStrategy=jp.co.acroquest.endosnipe.javelin.record.DefaultRecordStrategy

# Set Turn-around-time or CPU time as the judgement target of Threshold value excess.
javelin.recordStrategy=jp.co.acroquest.endosnipe.javelin.record.CpuTimeRecordStrategy

# Assume Threshold value excess if Turn-around-time of method updates previous maximum value.
#javelin.recordStrategy=jp.co.acroquest.endosnipe.javelin.record.MaxAccumulatedTimeUpdateRecordStrategy

#--------------------------------------------------
# Setting for functional add-on listener
#--------------------------------------------------

# Listener for additional processing at the time of alarm occurrence
javelin.alarmListeners=

# Listener for processing extension at the time of the telegram receive from BottleneckEye
javelin.telegramListeners=jp.co.acroquest.endosnipe.javelin.communicate.GetRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.ResetRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.JvnLogDownloadTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.JvnLogListTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.SystemResourceTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.UpdateRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.GetPropertyRequestTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.TargetSetTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.GetDumpTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.telegram.RemoveClassTelegramListener,jp.co.acroquest.endosnipe.javelin.communicate.FunctionCallTelegramListener

#--------------------------------------------------
# Setting for Statistical Processing
#--------------------------------------------------

# The number of calling information for each method accumulated in memory 
javelin.intervalMax=0

# The number of exception occurrence information for each method accumulated in memory
javelin.throwableMax=0

# Flag of class name abbreviation
# (Setting this flag true is recommended because class name is extended automatically in Seasar2 application)
javelin.className.simplify=false


#--------------------------------------------------
# メモリリーク検出に関する設定
#--------------------------------------------------

# Collectionのメモリリーク検出を行うかどうか
javelin.leak.collection.monitor=true

# メモリリークとして検出するCollection、Mapのサイズの閾値
javelin.leak.collectionSizeThreshold=50000

# このパラメータで指定したメモリリーク検出回数ごとに、スタックトレースを取得する
javelin.leak.interval=11

# メモリリーク検出時に、重複チェックを行うためのスタックトレースを保持する件数
javelin.leak.traceMax=20

# メモリリーク検出時に、判定に利用するスタックトレースを取得する深さ
javelin.leak.detect.traceDepth=5

# Java6以降でヒープヒストグラム解析を行うかどうか
javelin.leak.class.histo=false

# ヒープヒストグラム取得間隔(ms)
javelin.leak.class.histo.interval=3600000

# ヒープヒストグラム取得を行う際の最大件数
javelin.leak.class.histo.max=15

# ヒープヒストグラムを取得する際に、GCを行うかどうか
javelin.leak.class.histo.gc=false

# ファイナライズ待ちオブジェクト数を取得するかどうか
javelin.finalizationCount.monitor=true


#--------------------------------------------------
# スレッド監視に関する設定
#--------------------------------------------------

# スレッドコンテンション監視を行うかどうか
# (JRockit R26.0ではfalseにしてください)
javelin.thread.contention.monitor=true

# スレッド監視を行うかどうか
javelin.thread.monitor=true

# スレッド監視を行う周期(単位:ミリ秒)
javelin.thread.monitor.interval=1000

# スレッド監視の際に出力するスタックトレースの深さ
javelin.thread.monitor.depth=10

# ブロック継続イベントを出力する際のブロック継続時間の閾値。
# スレッド監視を行った際、閾値以上ならばイベント出力される。
javelin.thread.block.threshold=1000
javelin.thread.blocktime.threshold=2000

# フルスレッドダンプの出力を行うかどうか
# true の場合、以下の条件のいずれかを満たせばフルスレッドダンプを出力します。
# 1. スレッド数が javelin.thread.dump.threadnum 以上
# 2. CPU使用率が javelin.thread.dump.cpu 以上
javelin.thread.dump.monitor=false

# フルスレッドダンプ出力を判定する周期(単位:ミリ秒)
javelin.thread.dump.interval=15000

# フルスレッドダンプ出力を行うときの、スレッド数の閾値
javelin.thread.dump.threadnum=100

# フルスレッドダンプ出力を行うときの、CPU使用率の閾値
javelin.thread.dump.cpu=50

# フルGC検出を行うかどうか
javelin.fullgc.monitor=false

# フルGCを行うGarbageCollector名のリスト
javelin.fullgc.list=MarkSweepCompact,Garbage collection optimized for throughput Old Collector

# フルGC検出のGC実行時間の閾値
javelin.fullgc.threshold=5000

# Java6以降でデッドロック監視を行うかどうか
javelin.thread.deadlock.monitor=true


#--------------------------------------------------
# ネットワーク入出力監視に関する設定
#--------------------------------------------------

# ネットワーク入力量を監視するかどうか
javelin.net.input.monitor=true

# ネットワーク出力量を監視するかどうか
javelin.net.output.monitor=true


#--------------------------------------------------
# ファイル入出力監視に関する設定
#--------------------------------------------------

# ファイル入力量を監視するかどうか
javelin.file.input.monitor=true

# ファイル出力量を監視するかどうか
javelin.file.output.monitor=true


#--------------------------------------------------
# Setting for Turn Around Time Monitoring
#--------------------------------------------------

# Flag of Turn Around Time monitoring
javelin.tat.monitor=true

# Duration of retention for Turn Around Time (Unit: millisecond)
javelin.tat.keepTime=15000

# Time to keep outputting 0 if Turn Around Time value is 0 (Unit: millisecond)
javelin.tat.zeroKeepTime=10000


#--------------------------------------------------
# HTTP セッション監視に関する設定
#--------------------------------------------------

# HttpSessionのインスタンス数を監視するかどうか
javelin.httpSessionCount.monitor=true

# HttpSessionへの登録オブジェクト総サイズを監視するかどうか
javelin.httpSessionSize.monitor=false


#--------------------------------------------------
# 複数スレッドからの非同期アクセス監視に関する設定
#--------------------------------------------------

# 複数スレッドからの非同期アクセスを監視するかどうか
javelin.concurrent.monitor=true


#--------------------------------------------------
# タイムアウト値の検出に関する設定
#--------------------------------------------------

# タイムアウト値設定の監視を行うかどうか
javelin.timeout.monitor=true


#--------------------------------------------------
# Log4jエラーログ出力監視に関する設定
#--------------------------------------------------

# エラーログ出力時のスタックトレースを出力するログレベルの閾値
# Log4jにて、閾値以上のレベルでログ出力された場合、スタックトレースを出力する
javelin.log4j.printstack.level=ERROR


#--------------------------------------------------
# 線形検索監視に関する設定
#--------------------------------------------------

# 線形検索の検出を行うかどうか
javelin.linearsearch.monitor=true

# 線形検索検出を行うリストサイズの閾値
javelin.linearsearch.size=5000

# 線形検索対象となる、リストに対する検索した要素数の割合
javelin.linearsearch.ratio=10


#--------------------------------------------------
# EJBのセッション監視に関する設定
#--------------------------------------------------

# EJBのセッション監視を行うかどうか
javelin.ejb.session.monitor=false


#--------------------------------------------------
# Setting for Various Threshold Value
#--------------------------------------------------

# Threshold value for Turn Around Time to accumulate calling information (Unit: millisecond)
javelin.statisticsThreshold=0

# Threshold value for CPU time for notification to BottleneckEye(Unit: millisecond)
javelin.alarmCpuThreshold=-1

# Threshold value fot Turn Around Time to notify to BottleneckEye(Unit : millisecond)
javelin.alarmThreshold=-1

# Flag for exception information notification to BottleneckEye
javelin.alarmException=false


#--------------------------------------------------
# メソッド呼び出し間隔に関する設定
#--------------------------------------------------

# メソッドを指定された間隔(ミリ秒)未満の時間内に
# 再度呼び出した場合に、アラームを出力するかどうか
javelin.interval.monitor=true

# フレームワークの初期化メソッド等、頻繁に呼び出す必要の無いものの
# 呼び出しをチェックします
# javelin.interval.monitor=true のときに有効
javelin.interval.threshold=org.apache.velocity.app.Velocity#init=10000,org.springframework.context.support.GenericApplicationContext#GenericApplicationContext=10000,org.seasar.framework.container.factory.SingletonS2ContainerFactory#init=10000,org.seasar.framework.container.factory.S2ContainerFactory#create=10000,javax.xml.bind.JAXBContext#newInstance=30000,org.apache.commons.httpclient.SimpleHttpConnectionManager#SimpleHttpConnectionManager=10000,org.apache.log4j.PropertyConfigurator#doConfigure=10000,org.apache.log4j.xml.DOMConfigurator#doConfigure=10000,org.apache.log4j.Category#debug=10000

# 時間のかかる検索等、頻繁に呼び出す必要の無いものの
# 呼び出しをチェックします
# javelin.interval.monitor=true のときに有効
javelin.interval.perargs.threshold=javax.naming.InitialContext#lookup=10000,java.rmi.Naming#lookup=10000

#--------------------------------------------------
# Setting for Measurement Target Auto Matching Function
#--------------------------------------------------

# Threshold value of the number of calling excluded automatically from measurement target
javelin.autoExcludeThreshold.count=0

# Threshold value of the execution time excluded automatically from measurement target(Unit: millisecond)
javelin.autoExcludeThreshold.time=0

#--------------------------------------------------
# Setting for Measurement Data Acquisition
#--------------------------------------------------

# Flag for acquisition of system resource data
javelin.resource.collectSystemResources=true

# Flag for acquisition of HadoopAgent resource data
javelin.resource.collectHadoopAgentResources=false

# Character string as prefix of measurement item name(ID)
javelin.resource.itemName.prefix=

# Prefixmatch pattern list of item added no prefix to measurement item name(ID)
#javelin.resource.itemName.noPrefixList=/hdfs,/mapreduce


#--------------------------------------------------
# イベント送信に関する設定
#--------------------------------------------------

# InvocationFullEventを送信するかどうか
javelin.record.invocation.sendFullEvent=true


#--------------------------------------------------
# ストールメソッド監視に関する設定
#--------------------------------------------------
# ストールメソッドを監視するかどうか
javelin.method.stall.monitor=false

# ストールメソッドを監視する周期 (単位:ミリ秒)
javelin.method.stall.interval=10000

# ストールメソッドと判断する閾値 (単位:ミリ秒)
javelin.method.stall.threshold=60000

# ストールメソッド検出時に出力するスタックトレースの深さ
javelin.method.stall.traceDepth=30


#--------------------------------------------------
# Hadoopに関する設定
#--------------------------------------------------
# HadoopAgentのリソースデータを取得するかどうか
javelin.resource.collectHadoopAgentResources=false

# HBaseAgentのリソースデータを取得するかどうか
javelin.resource.collectHBaseAgentResources=false


################################################################################
# JDBC Javelin Configurations
################################################################################

#--------------------------------------------------
# Setting for JDBCJavelin
#--------------------------------------------------

# Flag for JDBC monitoring
javelin.jdbc.enable=true

# Flag for record of value of bind variables
javelin.jdbc.recordBindVal=false

# Flag for all log output of nested JDBC driver class calling
javelin.jdbc.recordDuplJdbcCall=false

# Maximum string length of SQL to record
javelin.jdbc.stringLimitLength=102400

# Flag for the number of the same SQL calling excess monitoring in the same transaction
javelin.jdbc.sqlcount.monitor=true

# Threshold value for the number of the same SQL calling excess in the same transaction
# If javelin.jdbc.sqlcount.monitor=true, it is valid.
javelin.jdbc.sqlcount=50

# Flag for stacktrace output with JDBCJavelin
javelin.jdbc.record.stackTrace=false

# Threshold value for stacktrace output with JDBCJavelin
javelin.jdbc.record.stacktraceThreshold=100

#--------------------------------------------------
# Setting for Execution Plan Acquisition
#--------------------------------------------------

# Flag for execution plan acquisition
javelin.jdbc.recordExecPlan=true

# Get execution plan if SQL execution time exceeds the following value.(Unit: millisecond)
javelin.jdbc.execPlanThreshold=100

# Execution plan acquisition interval(Unit: millisecond)
javelin.jdbc.planInterval=86400000


#--------------------------------------------------
# Inherent Setting for various DBMS
#--------------------------------------------------

# Flag for Oracle SQL trace in units of session
javelin.jdbc.oracle.allowSqlTrace=false

# Flag for detail execution plan output by PostgreSQL
javelin.jdbc.postgres.verbosePlan=false

# End of javelin.properties ####################################################
